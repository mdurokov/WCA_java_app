/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wca_app.view.options;

import java.awt.Component;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import oracle.jrockit.jfr.events.EventControl;
import wca_app.controller.EventContorller;
import wca_app.controller.FormatController;
import wca_app.controller.RoundTypeController;
import wca_app.model.Entity;
import wca_app.model.Event;
import wca_app.model.Format;
import wca_app.model.Operator;
import wca_app.model.RoundType;
import wca_app.tablemodel.EventTableModel;
import wca_app.tablemodel.FormatTableModel;
import wca_app.tablemodel.RoundTypeTableModel;
import wca_app.util.HibernateUtil;
import wca_app.view.DeleteProgresForm;

/**
 *
 * @author Mata
 */
public class OptionsPanel extends javax.swing.JPanel {

    private RoundType roundType;
    private RoundTypeController roundTypeController;
    private Format format;
    private FormatController formatController;
    private Event event;
    private EventContorller eventController;

    /**
     * Creates new form OptionsPanel
     */
    public OptionsPanel() {
        initComponents();
        setName("Options");
        try {
            roundTypeController = new RoundTypeController();
            formatController = new FormatController();
            eventController = new EventContorller();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error while creating "
                    + "controller: " + e, "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
        refreshRoundTypeView();
        refreshFormatView();
        refreshEventView();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        roundTypesTable = new javax.swing.JTable();
        roundTypeFieldsPanel = new javax.swing.JPanel();
        nameLbl = new javax.swing.JLabel();
        roundTypeNameField = new javax.swing.JTextField();
        cellNameLbl = new javax.swing.JLabel();
        roundTypeCellNameField = new javax.swing.JTextField();
        rankLbl = new javax.swing.JLabel();
        roundTypeRankField = new javax.swing.JTextField();
        roundTypeInfoLbl = new javax.swing.JLabel();
        roundTypeFinaleCmb = new javax.swing.JComboBox<>();
        formatLbl = new javax.swing.JLabel();
        roundTypeButtonPanel = new javax.swing.JPanel();
        roundTypeAddBtn = new javax.swing.JButton();
        roundTypeUpdateBtn = new javax.swing.JButton();
        roundTypeDeleteBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        formatTable = new javax.swing.JTable();
        formatFieldsPanel = new javax.swing.JPanel();
        formatNameLbl1 = new javax.swing.JLabel();
        formatNameField = new javax.swing.JTextField();
        formatInfoLbl = new javax.swing.JLabel();
        formatButtonPanel = new javax.swing.JPanel();
        formatAddBtn = new javax.swing.JButton();
        formatUpdateBtn = new javax.swing.JButton();
        formatDeleteBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        eventTable = new javax.swing.JTable();
        eventFieldsPanel = new javax.swing.JPanel();
        nameLbl1 = new javax.swing.JLabel();
        eventNameField = new javax.swing.JTextField();
        formatLbl1 = new javax.swing.JLabel();
        eventFormatField = new javax.swing.JTextField();
        rankLbl1 = new javax.swing.JLabel();
        eventRankField = new javax.swing.JTextField();
        infoLbl = new javax.swing.JLabel();
        eventButtonPanel = new javax.swing.JPanel();
        eventAddBtn = new javax.swing.JButton();
        eventUpdateBtn = new javax.swing.JButton();
        eventDeleteBtn = new javax.swing.JButton();

        roundTypesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        roundTypesTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        roundTypesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roundTypesTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(roundTypesTable);

        nameLbl.setText("Name: ");

        roundTypeNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                roundTypeNameFieldKeyTyped(evt);
            }
        });

        cellNameLbl.setText("Cell Name: ");

        roundTypeCellNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                roundTypeCellNameFieldKeyTyped(evt);
            }
        });

        rankLbl.setText("Rank: ");

        roundTypeRankField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                roundTypeRankFieldKeyTyped(evt);
            }
        });

        roundTypeInfoLbl.setForeground(new java.awt.Color(255, 51, 51));
        roundTypeInfoLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        roundTypeInfoLbl.setBorder(javax.swing.BorderFactory.createTitledBorder("Info Panel"));

        roundTypeFinaleCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));

        formatLbl.setText("Finale:");

        javax.swing.GroupLayout roundTypeFieldsPanelLayout = new javax.swing.GroupLayout(roundTypeFieldsPanel);
        roundTypeFieldsPanel.setLayout(roundTypeFieldsPanelLayout);
        roundTypeFieldsPanelLayout.setHorizontalGroup(
            roundTypeFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundTypeFieldsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roundTypeFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roundTypeFieldsPanelLayout.createSequentialGroup()
                        .addGroup(roundTypeFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameLbl)
                            .addComponent(formatLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(roundTypeFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(roundTypeNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                            .addComponent(roundTypeFinaleCmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(roundTypeFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rankLbl)
                            .addComponent(cellNameLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(roundTypeFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(roundTypeCellNameField)
                            .addComponent(roundTypeRankField)))
                    .addComponent(roundTypeInfoLbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        roundTypeFieldsPanelLayout.setVerticalGroup(
            roundTypeFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundTypeFieldsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roundTypeFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLbl)
                    .addComponent(roundTypeNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rankLbl)
                    .addComponent(roundTypeRankField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(roundTypeFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cellNameLbl)
                    .addComponent(roundTypeCellNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roundTypeFinaleCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(formatLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(roundTypeInfoLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE))
        );

        roundTypeAddBtn.setText("Add");
        roundTypeAddBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                roundTypeAddBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                roundTypeAddBtnMouseExited(evt);
            }
        });
        roundTypeAddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roundTypeAddBtnActionPerformed(evt);
            }
        });

        roundTypeUpdateBtn.setText("Update");
        roundTypeUpdateBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                roundTypeUpdateBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                roundTypeUpdateBtnMouseExited(evt);
            }
        });
        roundTypeUpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roundTypeUpdateBtnActionPerformed(evt);
            }
        });

        roundTypeDeleteBtn.setText("Delete");
        roundTypeDeleteBtn.setMaximumSize(new java.awt.Dimension(125, 23));
        roundTypeDeleteBtn.setMinimumSize(new java.awt.Dimension(125, 23));
        roundTypeDeleteBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                roundTypeDeleteBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                roundTypeDeleteBtnMouseExited(evt);
            }
        });
        roundTypeDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roundTypeDeleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout roundTypeButtonPanelLayout = new javax.swing.GroupLayout(roundTypeButtonPanel);
        roundTypeButtonPanel.setLayout(roundTypeButtonPanelLayout);
        roundTypeButtonPanelLayout.setHorizontalGroup(
            roundTypeButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundTypeButtonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(roundTypeAddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(roundTypeUpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(roundTypeDeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        roundTypeButtonPanelLayout.setVerticalGroup(
            roundTypeButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundTypeButtonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(roundTypeButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roundTypeAddBtn)
                    .addComponent(roundTypeUpdateBtn)
                    .addComponent(roundTypeDeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(roundTypeButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(roundTypeFieldsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(roundTypeFieldsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(roundTypeButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );

        jTabbedPane1.addTab("Round types", jPanel1);

        formatTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        formatTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formatTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(formatTable);

        formatNameLbl1.setText(" Name: ");

        formatNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formatNameFieldKeyTyped(evt);
            }
        });

        formatInfoLbl.setForeground(new java.awt.Color(255, 51, 51));
        formatInfoLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        formatInfoLbl.setBorder(javax.swing.BorderFactory.createTitledBorder("Info Panel"));

        javax.swing.GroupLayout formatFieldsPanelLayout = new javax.swing.GroupLayout(formatFieldsPanel);
        formatFieldsPanel.setLayout(formatFieldsPanelLayout);
        formatFieldsPanelLayout.setHorizontalGroup(
            formatFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formatFieldsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formatFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(formatInfoLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(formatFieldsPanelLayout.createSequentialGroup()
                        .addComponent(formatNameLbl1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(formatNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        formatFieldsPanelLayout.setVerticalGroup(
            formatFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formatFieldsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formatFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(formatNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(formatNameLbl1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formatInfoLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE))
        );

        formatAddBtn.setText("Add");
        formatAddBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formatAddBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formatAddBtnMouseExited(evt);
            }
        });
        formatAddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatAddBtnActionPerformed(evt);
            }
        });

        formatUpdateBtn.setText("Update");
        formatUpdateBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formatUpdateBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formatUpdateBtnMouseExited(evt);
            }
        });
        formatUpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatUpdateBtnActionPerformed(evt);
            }
        });

        formatDeleteBtn.setText("Delete");
        formatDeleteBtn.setMaximumSize(new java.awt.Dimension(125, 23));
        formatDeleteBtn.setMinimumSize(new java.awt.Dimension(125, 23));
        formatDeleteBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formatDeleteBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formatDeleteBtnMouseExited(evt);
            }
        });
        formatDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatDeleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout formatButtonPanelLayout = new javax.swing.GroupLayout(formatButtonPanel);
        formatButtonPanel.setLayout(formatButtonPanelLayout);
        formatButtonPanelLayout.setHorizontalGroup(
            formatButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formatButtonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(formatAddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(formatUpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(formatDeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        formatButtonPanelLayout.setVerticalGroup(
            formatButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, formatButtonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(formatButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(formatAddBtn)
                    .addComponent(formatUpdateBtn)
                    .addComponent(formatDeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
                    .addComponent(formatButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(formatFieldsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addComponent(formatFieldsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formatButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        jTabbedPane1.addTab("Formats", jPanel2);

        eventTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        eventTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eventTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(eventTable);

        nameLbl1.setText("Name: ");

        eventNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                eventNameFieldKeyTyped(evt);
            }
        });

        formatLbl1.setText("Format: ");

        eventFormatField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                eventFormatFieldKeyTyped(evt);
            }
        });

        rankLbl1.setText("Rank: ");

        eventRankField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                eventRankFieldKeyTyped(evt);
            }
        });

        infoLbl.setForeground(new java.awt.Color(255, 51, 51));
        infoLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        infoLbl.setBorder(javax.swing.BorderFactory.createTitledBorder("Info Panel"));

        javax.swing.GroupLayout eventFieldsPanelLayout = new javax.swing.GroupLayout(eventFieldsPanel);
        eventFieldsPanel.setLayout(eventFieldsPanelLayout);
        eventFieldsPanelLayout.setHorizontalGroup(
            eventFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventFieldsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(eventFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(eventFieldsPanelLayout.createSequentialGroup()
                        .addGroup(eventFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(formatLbl1)
                            .addComponent(nameLbl1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(eventFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(eventFormatField, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                            .addComponent(eventNameField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rankLbl1)
                        .addGap(27, 27, 27)
                        .addComponent(eventRankField, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE))
                    .addComponent(infoLbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        eventFieldsPanelLayout.setVerticalGroup(
            eventFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventFieldsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(eventFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLbl1)
                    .addComponent(eventNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rankLbl1)
                    .addComponent(eventRankField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(eventFieldsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventFormatField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(formatLbl1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE))
        );

        eventAddBtn.setText("Add");
        eventAddBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                eventAddBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                eventAddBtnMouseExited(evt);
            }
        });
        eventAddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventAddBtnActionPerformed(evt);
            }
        });

        eventUpdateBtn.setText("Update");
        eventUpdateBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                eventUpdateBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                eventUpdateBtnMouseExited(evt);
            }
        });
        eventUpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventUpdateBtnActionPerformed(evt);
            }
        });

        eventDeleteBtn.setText("Delete");
        eventDeleteBtn.setMaximumSize(new java.awt.Dimension(125, 23));
        eventDeleteBtn.setMinimumSize(new java.awt.Dimension(125, 23));
        eventDeleteBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                eventDeleteBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                eventDeleteBtnMouseExited(evt);
            }
        });
        eventDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventDeleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout eventButtonPanelLayout = new javax.swing.GroupLayout(eventButtonPanel);
        eventButtonPanel.setLayout(eventButtonPanelLayout);
        eventButtonPanelLayout.setHorizontalGroup(
            eventButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventButtonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(eventAddBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(eventUpdateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(eventDeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        eventButtonPanelLayout.setVerticalGroup(
            eventButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, eventButtonPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(eventButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventAddBtn)
                    .addComponent(eventUpdateBtn)
                    .addComponent(eventDeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
                    .addComponent(eventButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eventFieldsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(eventFieldsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(eventButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        jTabbedPane1.addTab("Events", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void roundTypeNameFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_roundTypeNameFieldKeyTyped
        if (roundTypeNameField.getText().length() > 49) {
            roundTypeInfoLbl.setText("Limit is 50 characters!");
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_roundTypeNameFieldKeyTyped

    private void roundTypeCellNameFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_roundTypeCellNameFieldKeyTyped
        if (roundTypeCellNameField.getText().length() > 49) {
            roundTypeInfoLbl.setText("Limit is 50 characters!");
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_roundTypeCellNameFieldKeyTyped

    private void roundTypeRankFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_roundTypeRankFieldKeyTyped
        char e = evt.getKeyChar();
        if (!(Character.isDigit(e))) {
            roundTypeInfoLbl.setText("Numbers only!");
            getToolkit().beep();
            evt.consume();
        }

        if (roundTypeRankField.getText().length() > 9) {
            roundTypeInfoLbl.setText("Limit is 10 numbers!");
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_roundTypeRankFieldKeyTyped

    private void roundTypeAddBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roundTypeAddBtnMouseEntered
        if (roundTypeNameField.getText().trim().isEmpty()
                || roundTypeRankField.getText().trim().isEmpty()
                || roundTypeCellNameField.getText().trim().isEmpty()) {
            roundTypeAddBtn.setEnabled(false);
            roundTypeInfoLbl.setText("Fields can't be empty!");
        }
    }//GEN-LAST:event_roundTypeAddBtnMouseEntered

    private void roundTypeAddBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roundTypeAddBtnMouseExited
        roundTypeAddBtn.setEnabled(true);
    }//GEN-LAST:event_roundTypeAddBtnMouseExited

    private void roundTypeAddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundTypeAddBtnActionPerformed
        roundType = new RoundType();
        if (!fillRoundTypeProperties()) {
            return;
        }
        try {
            RoundType newRoundType = roundTypeController.add(roundType);
            refreshRoundTypeView();
            for (int i = 0; i < roundTypesTable.getModel().getRowCount(); i++) {
                if (roundTypesTable.getValueAt(i, RoundTypeTableModel.ID_COL)
                        == newRoundType.getId()) {
                    roundTypesTable.setRowSelectionInterval(i, i);
                    break;
                }
            }
            loadRoundTypesProperties(roundType);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(getRootPane(), "Error saving round "
                    + "type: " + e);
        }
    }//GEN-LAST:event_roundTypeAddBtnActionPerformed

    private void roundTypeUpdateBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roundTypeUpdateBtnMouseEntered
        if (roundTypesTable.getRowCount() > 0) {
            if (roundTypeNameField.getText().trim().isEmpty()
                    || roundTypeRankField.getText().trim().isEmpty()
                    || roundTypeCellNameField.getText().trim().isEmpty()) {
                roundTypeUpdateBtn.setEnabled(false);
                roundTypeInfoLbl.setText("Fields can't be empty!");
            }
        } else {
            roundTypeUpdateBtn.setEnabled(false);
            roundTypeInfoLbl.setText("Nothing to update");
        }
    }//GEN-LAST:event_roundTypeUpdateBtnMouseEntered

    private void roundTypeUpdateBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roundTypeUpdateBtnMouseExited
        roundTypeUpdateBtn.setEnabled(true);
    }//GEN-LAST:event_roundTypeUpdateBtnMouseExited

    private void roundTypeUpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundTypeUpdateBtnActionPerformed
        if (!fillRoundTypeProperties()) {
            return;
        }
        try {
            RoundType newRoundType = roundTypeController.update(roundType);
            refreshRoundTypeView();
            for (int i = 0; i < roundTypesTable.getModel().getRowCount(); i++) {
                if (roundTypesTable.getValueAt(i, RoundTypeTableModel.ID_COL)
                        == newRoundType.getId()) {
                    roundTypesTable.setRowSelectionInterval(i, i);
                    break;
                }
            }
            loadRoundTypesProperties(roundType);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(getRootPane(), "Error saving round "
                    + "type: " + e);
        }
    }//GEN-LAST:event_roundTypeUpdateBtnActionPerformed

    private void roundTypeDeleteBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roundTypeDeleteBtnMouseEntered
        if (!(roundTypesTable.getRowCount() > 0)) {
            roundTypeDeleteBtn.setEnabled(false);
        }
    }//GEN-LAST:event_roundTypeDeleteBtnMouseEntered

    private void roundTypeDeleteBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roundTypeDeleteBtnMouseExited
        roundTypeDeleteBtn.setEnabled(true);
    }//GEN-LAST:event_roundTypeDeleteBtnMouseExited

    private void roundTypeDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundTypeDeleteBtnActionPerformed
        if (roundTypesTable.getSelectedRows().length == 1) {
            if (JOptionPane.showConfirmDialog(getRootPane(), "Are you sure you"
                    + " want to delete selected item?", "Confirm",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
                try {
                    RoundType roundType = (RoundType) roundTypesTable
                            .getValueAt(roundTypesTable.getSelectedRow(),
                                    RoundTypeTableModel.OBJECT_COL);
                    roundTypeController.deleteEntity(roundType);
                } catch (Exception ex) {
                    HibernateUtil.getSession().clear();
                    JOptionPane.showMessageDialog(getRootPane(), "Competition "
                            + roundTypesTable.getSelectedRow()
                            + " can't be deleted");
                }
                refreshRoundTypeView();
            }
        } else {
            if (JOptionPane.showConfirmDialog(getRootPane(), "Are you sure you"
                    + " want to delete selected items?", "Confirm",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
                new MultiDeleteRoundTypes().start();
            }
        }
    }//GEN-LAST:event_roundTypeDeleteBtnActionPerformed

    private void formatNameFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formatNameFieldKeyTyped
        if (formatNameField.getText().length() > 49) {
            formatInfoLbl.setText("Limit is 50 characters!");
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_formatNameFieldKeyTyped

    private void formatAddBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formatAddBtnMouseEntered
        if (formatNameField.getText().trim().isEmpty()) {
            formatAddBtn.setEnabled(false);
            formatInfoLbl.setText("Field Name can't be empty!");
        }
    }//GEN-LAST:event_formatAddBtnMouseEntered

    private void formatAddBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formatAddBtnMouseExited
        formatAddBtn.setEnabled(true);
    }//GEN-LAST:event_formatAddBtnMouseExited

    private void formatAddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatAddBtnActionPerformed
        format = new Format();
        format.setName(formatNameField.getText());
        try {
            Format newFormat = formatController.add(format);
            refreshFormatView();
            for (int i = 0; i < formatTable.getModel().getRowCount(); i++) {
                if (formatTable.getValueAt(i, RoundTypeTableModel.ID_COL)
                        == newFormat.getId()) {
                    formatTable.setRowSelectionInterval(i, i);
                    break;
                }
            }
            formatNameField.setText(newFormat.getName());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(getRootPane(), "Error saving format: "
                    + e);
        }
    }//GEN-LAST:event_formatAddBtnActionPerformed

    private void formatUpdateBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formatUpdateBtnMouseEntered
        if (!(formatTable.getRowCount() > 0)) {
            formatUpdateBtn.setEnabled(false);
            formatInfoLbl.setText("Field Name can't be empty!");
        } else {
            formatUpdateBtn.setEnabled(false);
            formatInfoLbl.setText("Select what to update!");
        }
    }//GEN-LAST:event_formatUpdateBtnMouseEntered

    private void formatUpdateBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formatUpdateBtnMouseExited
        formatUpdateBtn.setEnabled(true);
    }//GEN-LAST:event_formatUpdateBtnMouseExited

    private void formatUpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatUpdateBtnActionPerformed
        format.setName(formatNameField.getText());
        try {
            Format newFormat = formatController.update(format);
            refreshFormatView();
            for (int i = 0; i < formatTable.getModel().getRowCount(); i++) {
                if (formatTable.getValueAt(i, FormatTableModel.ID_COL)
                        == newFormat.getId()) {
                    formatTable.setRowSelectionInterval(i, i);
                    break;
                }
            }
            formatNameField.setText(newFormat.getName());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(getRootPane(), "Error saving format: "
                    + e);
        }
    }//GEN-LAST:event_formatUpdateBtnActionPerformed

    private void formatDeleteBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formatDeleteBtnMouseEntered
        if (!(formatTable.getRowCount() > 0)) {
            formatDeleteBtn.setEnabled(false);
            formatInfoLbl.setText("Select what to delete!");
        }
    }//GEN-LAST:event_formatDeleteBtnMouseEntered

    private void formatDeleteBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formatDeleteBtnMouseExited
        formatDeleteBtn.setEnabled(true);
    }//GEN-LAST:event_formatDeleteBtnMouseExited

    private void formatDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatDeleteBtnActionPerformed
        if (formatTable.getSelectedRows().length == 1) {
            if (JOptionPane.showConfirmDialog(getRootPane(), "Are you sure you"
                    + " want to delete selected item?", "Confirm",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
                try {
                    Format format = (Format) formatTable
                            .getValueAt(formatTable.getSelectedRow(),
                                    FormatTableModel.OBJECT_COL);
                    formatController.deleteEntity(format);
                } catch (Exception ex) {
                    HibernateUtil.getSession().clear();
                    JOptionPane.showMessageDialog(getRootPane(), "Competition "
                            + formatTable.getSelectedRow()
                            + " can't be deleted");
                }
                refreshFormatView();
            }
        } else {
            if (JOptionPane.showConfirmDialog(getRootPane(), "Are you sure you"
                    + " want to delete selected items?", "Confirm",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
                new MultiDeleteFormats().start();
            }
        }
    }//GEN-LAST:event_formatDeleteBtnActionPerformed

    private void eventNameFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_eventNameFieldKeyTyped
        if (eventNameField.getText().length() > 49) {
            infoLbl.setText("Limit is 50 characters!");
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_eventNameFieldKeyTyped

    private void eventFormatFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_eventFormatFieldKeyTyped
        if (eventFormatField.getText().length() > 9) {
            infoLbl.setText("Limit is 10 characters!");
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_eventFormatFieldKeyTyped

    private void eventRankFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_eventRankFieldKeyTyped
        char e = evt.getKeyChar();
        if (!(Character.isDigit(e))) {
            infoLbl.setText("Numbers only!");
            getToolkit().beep();
            evt.consume();
        }

        if (eventRankField.getText().length() > 9) {
            infoLbl.setText("Limit is 10 numbers!");
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_eventRankFieldKeyTyped

    private void eventAddBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eventAddBtnMouseEntered
        if (eventNameField.getText().trim().isEmpty()
                || eventRankField.getText().trim().isEmpty()
                || eventFormatField.getText().trim().isEmpty()) {
            eventAddBtn.setEnabled(false);
            infoLbl.setText("Fields can't be empty!");
        }
    }//GEN-LAST:event_eventAddBtnMouseEntered

    private void eventAddBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eventAddBtnMouseExited
        eventAddBtn.setEnabled(true);
    }//GEN-LAST:event_eventAddBtnMouseExited

    private void eventAddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventAddBtnActionPerformed
        event = new Event();
        if (!fillEventProperties()) {
            return;
        }
        try {
            Event newEvent = eventController.add(event);
            refreshEventView();
            for (int i = 0; i < eventTable.getModel().getRowCount(); i++) {
                if (eventTable.getValueAt(i, EventTableModel.ID_COL)
                        == newEvent.getId()) {
                    eventTable.setRowSelectionInterval(i, i);
                    break;
                }
            }
            loadEventProperties(event);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(getRootPane(), "Error saving event: "
                    + e);
        }
    }//GEN-LAST:event_eventAddBtnActionPerformed

    private void eventUpdateBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eventUpdateBtnMouseEntered
        if (!(formatTable.getRowCount() > 0)) {
            if (eventNameField.getText().trim().isEmpty()
                    || eventRankField.getText().trim().isEmpty()
                    || eventFormatField.getText().trim().isEmpty()) {
                eventUpdateBtn.setEnabled(false);
                infoLbl.setText("Fields can't be empty!");
            }
        } else {
            eventUpdateBtn.setEnabled(false);
            infoLbl.setText("Select what to update!");
        }
    }//GEN-LAST:event_eventUpdateBtnMouseEntered

    private void eventUpdateBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eventUpdateBtnMouseExited
        eventUpdateBtn.setEnabled(true);
    }//GEN-LAST:event_eventUpdateBtnMouseExited

    private void eventUpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventUpdateBtnActionPerformed
        if (!fillEventProperties()) {
            return;
        }

        try {
            Event newEvent = eventController.update(event);
            refreshEventView();
            for (int i = 0; i < eventTable.getModel().getRowCount(); i++) {
                if (eventTable.getValueAt(i, EventTableModel.ID_COL)
                        == newEvent.getId()) {
                    eventTable.setRowSelectionInterval(i, i);
                    break;
                }
            }
            loadEventProperties(event);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(getRootPane(), "Error saving round "
                    + "type: " + e);
        }
    }//GEN-LAST:event_eventUpdateBtnActionPerformed

    private void eventDeleteBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eventDeleteBtnMouseEntered
        if (!(formatTable.getRowCount() > 0)) {
            eventDeleteBtn.setEnabled(false);
            infoLbl.setText("Select what to delete!");
        }
    }//GEN-LAST:event_eventDeleteBtnMouseEntered

    private void eventDeleteBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eventDeleteBtnMouseExited
        eventDeleteBtn.setEnabled(true);
    }//GEN-LAST:event_eventDeleteBtnMouseExited

    private void eventDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventDeleteBtnActionPerformed
        if (eventTable.getSelectedRows().length == 1) {
            if (JOptionPane.showConfirmDialog(getRootPane(), "Are you sure you"
                    + " want to delete selected item?", "Confirm",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
                try {
                    Event event = (Event) eventTable
                            .getValueAt(eventTable.getSelectedRow(),
                                    EventTableModel.OBJECT_COL);
                    eventController.deleteEntity(event);
                } catch (Exception ex) {
                    HibernateUtil.getSession().clear();
                    JOptionPane.showMessageDialog(getRootPane(), "Competition "
                            + eventTable.getSelectedRow()
                            + " can't be deleted");
                }
                refreshEventView();
            }
        } else {
            if (JOptionPane.showConfirmDialog(getRootPane(), "Are you sure you"
                    + " want to delete selected items?", "Confirm",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
                new MultiDeleteEvents().start();
            }
        }
    }//GEN-LAST:event_eventDeleteBtnActionPerformed

    private void eventTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eventTableMouseClicked
        Event tempEvent = (Event) eventTable.getValueAt(eventTable.
                getSelectedRow(), EventTableModel.OBJECT_COL);
        loadEventProperties(tempEvent);
    }//GEN-LAST:event_eventTableMouseClicked

    private void formatTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formatTableMouseClicked
        Format tempFormat = (Format) formatTable.getValueAt(formatTable.
                getSelectedRow(), FormatTableModel.OBJECT_COL);
        formatNameField.setText(format.getName());
    }//GEN-LAST:event_formatTableMouseClicked

    private void roundTypesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roundTypesTableMouseClicked
        RoundType tempRoundType = (RoundType) roundTypesTable
                .getValueAt(roundTypesTable.getSelectedRow(),
                        RoundTypeTableModel.OBJECT_COL);
        loadRoundTypesProperties(tempRoundType);
    }//GEN-LAST:event_roundTypesTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cellNameLbl;
    private javax.swing.JButton eventAddBtn;
    private javax.swing.JPanel eventButtonPanel;
    private javax.swing.JButton eventDeleteBtn;
    private javax.swing.JPanel eventFieldsPanel;
    private javax.swing.JTextField eventFormatField;
    private javax.swing.JTextField eventNameField;
    private javax.swing.JTextField eventRankField;
    private javax.swing.JTable eventTable;
    private javax.swing.JButton eventUpdateBtn;
    private javax.swing.JButton formatAddBtn;
    private javax.swing.JPanel formatButtonPanel;
    private javax.swing.JButton formatDeleteBtn;
    private javax.swing.JPanel formatFieldsPanel;
    private javax.swing.JLabel formatInfoLbl;
    private javax.swing.JLabel formatLbl;
    private javax.swing.JLabel formatLbl1;
    private javax.swing.JTextField formatNameField;
    private javax.swing.JLabel formatNameLbl1;
    private javax.swing.JTable formatTable;
    private javax.swing.JButton formatUpdateBtn;
    private javax.swing.JLabel infoLbl;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JLabel nameLbl1;
    private javax.swing.JLabel rankLbl;
    private javax.swing.JLabel rankLbl1;
    private javax.swing.JButton roundTypeAddBtn;
    private javax.swing.JPanel roundTypeButtonPanel;
    private javax.swing.JTextField roundTypeCellNameField;
    private javax.swing.JButton roundTypeDeleteBtn;
    private javax.swing.JPanel roundTypeFieldsPanel;
    private javax.swing.JComboBox<String> roundTypeFinaleCmb;
    private javax.swing.JLabel roundTypeInfoLbl;
    private javax.swing.JTextField roundTypeNameField;
    private javax.swing.JTextField roundTypeRankField;
    private javax.swing.JButton roundTypeUpdateBtn;
    private javax.swing.JTable roundTypesTable;
    // End of variables declaration//GEN-END:variables

    private boolean fillRoundTypeProperties() {
        roundType.setName(roundTypeNameField.getText());
        roundType.setRank(Integer.parseInt(roundTypeRankField.getText()));
        if (roundTypeFinaleCmb.getSelectedIndex() == 0) {
            roundType.setFinale(true);
        } else {
            roundType.setFinale(false);
        }
        roundType.setCellName(roundTypeCellNameField.getText());
        return true;
    }

    private boolean fillEventProperties() {
        event.setName(eventNameField.getText());
        event.setFormat(eventFormatField.getText());
        event.setRank(Integer.valueOf(eventRankField.getText()));
        return true;
    }

    private void refreshRoundTypeView() {
        try {
            List<RoundType> roundTypes
                    = roundTypeController.getEntities();
            RoundTypeTableModel model
                    = new RoundTypeTableModel(roundTypes);
            roundTypesTable.setModel(model);
            if (model.getRowCount() > 0) {
                roundTypesTable.setRowSelectionInterval(0, 0);
                roundType =(RoundType) roundTypesTable.getValueAt(0,
                        EventTableModel.OBJECT_COL);
                loadRoundTypesProperties(roundType);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error while refreshing "
                    + "roundt type view: " + e, "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void refreshFormatView() {
        try {
            List<Format> formats
                    = formatController.getEntities();
            FormatTableModel model
                    = new FormatTableModel(formats);
            formatTable.setModel(model);
            if (model.getRowCount() > 0) {
                formatTable.setRowSelectionInterval(0, 0);
                format =(Format) formatTable.getValueAt(0,
                        FormatTableModel.OBJECT_COL);
                formatNameField.setText(format.getName());
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error while refreshing "
                    + "format view: " + e, "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void refreshEventView() {
        try {
            List<Event> events = eventController.getEntities();
            EventTableModel model = new EventTableModel(events);
            eventTable.setModel(model);
            if (model.getRowCount() > 0) {
                eventTable.setRowSelectionInterval(0, 0);
                event =(Event) eventTable.getValueAt(0,
                        EventTableModel.OBJECT_COL);
                loadEventProperties(event);
            }
            

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error while refreshing "
                    + "event view: " + e, "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadRoundTypesProperties(RoundType roundType) {
        roundTypeCellNameField.setText(roundType.getCellName());
        roundTypeNameField.setText(roundType.getName());
        roundTypeRankField.setText(Integer.toString(roundType.getRank()));
        if (roundType.getFinale()) {
            roundTypeFinaleCmb.setSelectedIndex(0);
        } else {
            roundTypeFinaleCmb.setSelectedIndex(1);
        }
    }

    private void loadEventProperties(Event event) {
        eventNameField.setText(event.getName());
        eventFormatField.setText(event.getFormat());
        eventRankField.setText(Integer.toString(event.getRank()));
    }

    public class MultiDeleteRoundTypes extends Thread {

        public void run() {
            int max = roundTypesTable.getSelectedRowCount();
            int j = 0;
            DeleteProgresForm deleteForm = new DeleteProgresForm(max);
            deleteForm.setVisible(true);
            for (int i : roundTypesTable.getSelectedRows()) {
                RoundType roundType = (RoundType) roundTypesTable.getValueAt(i, RoundTypeTableModel.OBJECT_COL);
                j++;
                deleteForm.changeAppearance(j, max, roundType);
                try {
                    roundTypeController.deleteEntity(roundType);
                } catch (Exception e) {
                    HibernateUtil.getSession().clear();
                }
            }
            try {
                Thread.sleep(1000);
            } catch (Exception e) {
                e.printStackTrace();
            }

            deleteForm.dispose();
            refreshRoundTypeView();
        }
    }

    public class MultiDeleteFormats extends Thread {

        public void run() {
            int max = formatTable.getSelectedRowCount();
            int j = 0;
            DeleteProgresForm deleteForm = new DeleteProgresForm(max);
            deleteForm.setVisible(true);
            for (int i : formatTable.getSelectedRows()) {
                Format format = (Format) formatTable.getValueAt(i, FormatTableModel.OBJECT_COL);
                j++;
                deleteForm.changeAppearance(j, max, format);
                try {
                    formatController.deleteEntity(format);
                } catch (Exception e) {
                    HibernateUtil.getSession().clear();
                }
            }
            try {
                Thread.sleep(1000);
            } catch (Exception e) {
                e.printStackTrace();
            }

            deleteForm.dispose();
            refreshFormatView();
        }
    }

    public class MultiDeleteEvents extends Thread {

        public void run() {
            int max = eventTable.getSelectedRowCount();
            int j = 0;
            DeleteProgresForm deleteForm = new DeleteProgresForm(max);
            deleteForm.setVisible(true);
            for (int i : eventTable.getSelectedRows()) {
                Event event = (Event) eventTable.getValueAt(i, EventTableModel.OBJECT_COL);
                j++;
                deleteForm.changeAppearance(j, max, event);
                try {
                    eventController.deleteEntity(event);
                } catch (Exception e) {
                    HibernateUtil.getSession().clear();
                }
            }
            try {
                Thread.sleep(1000);
            } catch (Exception e) {
                e.printStackTrace();
            }

            deleteForm.dispose();
            refreshEventView();
        }
    }
}
